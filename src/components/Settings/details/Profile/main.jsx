import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import styles from "./main.module.css";
import Button from "../../../Detals/SubmitButton/button.jsx";
import Input from "../../details/Input/input.jsx";
import FastLoadImg from "../../../Detals/LoadMedia/index1/index.jsx"; // FastLoadImg ni to'g'ri yo'ldan chaqiring
import { endpoints } from "../../../../services/api.js";
import { apiConnector } from "../../../../services/apiconnector";

// üç™ Cookie dan token olish funksiyasi
function getAccessTokenFromCookie() {
  const name = "access_token=";
  const decodedCookie = decodeURIComponent(document.cookie);
  const cookies = decodedCookie.split(";");

  for (let i = 0; i < cookies.length; i++) {
    let cookie = cookies[i].trim();
    if (cookie.startsWith(name)) {
      return cookie.substring(name.length);
    }
  }

  return null;
}

function Main() {
  const navigate = useNavigate();
  const token = getAccessTokenFromCookie();

  const [profileImage, setProfileImage] = useState(null); // API ga yuboriladigan rasm
  const [uploadedImg, setUploadedImg] = useState(null); // Frontendda ko'rsatiladigan rasm

  const [formData, setFormData] = useState({
    fullName: "",
    phone: "",
    oldPassword: "",
    password: "",
    confirmPassword: "",
  });

  // üñºÔ∏è Rasm yuklanganda
  const handleImageChange = (result) => {
    console.log(
      "‚úÖ Qaytgan rasm:",
      endpoints.GET_MEDIA_UPLOADS + result.filename
    );
    setUploadedImg(endpoints.GET_MEDIA_UPLOADS + result.filename);
    setProfileImage(result);
  };

  // ‚úèÔ∏è Inputlar uchun handler
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // ‚úÖ Submit funksiyasi
  const handleSubmit = async (e) => {
    e.preventDefault();

    const { fullName, phone, oldPassword, password, confirmPassword } =
      formData;

    if (
      !fullName.trim() ||
      !phone.trim() ||
      !password.trim() ||
      !confirmPassword.trim()
    ) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
      return;
    }

    if (password !== confirmPassword) {
      alert("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
      return;
    }

    if (!profileImage?.url) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è!");
      return;
    }

    try {
      // üë§ Profil ma‚Äôlumotlarini yuborish
      await apiConnector(
        "PUT",
        endpoints.ADMIN_EDIT,
        {
          full_name: fullName,
          phone: phone,
          avatar: endpoints.GET_MEDIA_UPLOADS + profileImage.filename,
        },
        {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        }
      );

      // üîê Parolni yangilash
      await apiConnector(
        "PUT",
        endpoints.ADMIN_UPDATE_PASSWORD,
        {
          old_password: oldPassword,
          password: password,
        },
        {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        }
      );

      alert("‚úÖ Ma'lumotlar muvaffaqiyatli yangilandi!");
    } catch (error) {
      alert("‚ùå Xatolik yuz berdi: " + error.message);
    }
  };

  // üì¶ Input maydonlari
  const inputs = [
    {
      name: "fullName",
      text: "–ò–º—è –∏ –§–∞–º–∏–ª–∏—è",
      type: "text",
      placeholder: "–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é",
    },
    {
      name: "phone",
      text: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
      type: "number",
      placeholder: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    },
    {
      name: "oldPassword",
      text: "–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å",
      type: "password",
      placeholder: "‚àó‚àó‚àó‚àó‚àó‚àó‚àó‚àó",
    },
    {
      name: "password",
      text: "–ü–∞—Ä–æ–ª—å",
      type: "password",
      placeholder: "‚àó‚àó‚àó‚àó‚àó‚àó‚àó‚àó",
    },
    {
      name: "confirmPassword",
      text: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
      type: "password",
      placeholder: "‚àó‚àó‚àó‚àó‚àó‚àó‚àó‚àó",
    },
  ];

  return (
    <form className={styles.form} onSubmit={handleSubmit}>
      <div className={styles.form_items}>
        <div className={styles.form_img_wrapper}>
          <FastLoadImg
            key={uploadedImg}
            onImageChange={handleImageChange}
            src={uploadedImg}
            size={{ wrapper: "466px", image: "280px", gap: "18.5px" }}
            title={"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é"}
            subtitle={
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpeg, png –∏–ª–∏ mp4, webM –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ú–ë."
            }
          />
        </div>
        <div className={styles.form_input_wrapper}>
          {inputs.map((input) => (
            <Input
              key={input.name}
              text={input.text}
              type={input.type}
              plesholder={input.placeholder}
              value={formData[input.name]}
              onChange={handleChange}
              name={input.name}
            />
          ))}
        </div>
      </div>
      <div className={styles.submit_wrapper}>
        <Button text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" type="submit" />
      </div>
    </form>
  );
}

export default Main;
